# Quantix Inventory Management System - CI/CD Pipeline
# This workflow runs tests and deploys the application

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: quantix_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: pdo, pdo_mysql, json, curl
        coverage: xdebug

    - name: Validate composer.json and composer.lock
      run: |
        if [ -f composer.json ]; then
          composer validate --strict
        fi

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: |
        if [ -f composer.json ]; then
          composer install --prefer-dist --no-progress
        fi

    - name: Create test configuration
      run: |
        cp includes/config.template.php includes/config.php
        sed -i "s/your_db_username/root/" includes/config.php
        sed -i "s/your_db_password/test_password/" includes/config.php
        sed -i "s/quantix_inventory/quantix_test/" includes/config.php

    - name: Set up database
      run: |
        mysql -h 127.0.0.1 -u root -ptest_password quantix_test < dbschema.sql

    - name: Run syntax check
      run: |
        find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;

    - name: Run integration tests
      run: |
        php test-integration.php

    - name: Run health check
      run: |
        php health-check.php

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging server..."
        # Add your staging deployment commands here
        # Example: rsync, scp, or deployment script
    
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        echo "Deploying to production server..."
        # Add your production deployment commands here
        # Example: rsync, scp, or deployment script
        
    - name: Notify deployment
      if: success()
      run: |
        echo "âœ… Production deployment successful"
        # Add notification logic (Slack, email, etc.)
